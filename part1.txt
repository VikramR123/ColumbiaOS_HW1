Part 1: 
Enter your answer in the designated location. Do NOT remove lines that start
with '=' signs and keep lines to a max of 80 chars long.

================================== Q1 start ===================================
1.  What actions does a kernel perform to context switch between processes?

During a context switch, the OS executes code to save the register values and
stack pointer of the currently-running process, then restore those registers
for the desired process. Once the OS executes a return-from-trap instruction,
the desired process will then become the currently running one.

=================================== Q1 end ====================================


================================== Q2 start ===================================
2.  What process state does a process enter immediately after it terminates?
    What is this state for, and when does it leave this state?

After running, a process can be placed in a final/zombie state, which allows
other processes, usually the parent one, to check if it executed successfully
by looking at the return code. Once finished, the parent will make one final
call (wait()) to tell the OS to clean up the extinct process.

=================================== Q2 end ====================================


================================== Q3 start ===================================
3.  What is typeof? Is it a C language keyword, function, or macro? What does
    it do?

It is a C language keyword, and is used to get a type at compile time. 

=================================== Q3 end ====================================


================================== Q4 start ===================================
4.  What is offsetof? Is it a keyword, function, or macro? What does it do?

It is a macro, and evaluates to the offset in bytes of a given member variable
in a struct. 

=================================== Q4 end ====================================


================================== Q5 start ===================================
5.  What does the container_of() macro do?

It returns the parent structure of any given member variable. This is useful
in C because you can easily find the parent structure of any given linked-list
head.

=================================== Q5 end ====================================


================================== Q6 start ===================================
6.  The container_of() macro, in the way itâ€™s currently written, is not
    portable across C compilers because it uses GNU-specific language
    extensions. Can you identify what they are?

A GNU C extension used by container_of is called statement expressions. This
was most likely used to ensure type safety and prevent any related bugs. 

=================================== Q6 end ====================================


================================== Q7 start ===================================
7.  The container_of() macro has two lines. Is the 1st line (the declaration of
    __mptr) really necessary? Is it possible to rewrite the macro without it?
    What is the purpose of that 1st line?

Yes it is necessary, because in C you must define type for every variable. 
For this function, you will not always know the type of the container, and thus
need the typeof to find the type at compile time. 

=================================== Q7 end ====================================
